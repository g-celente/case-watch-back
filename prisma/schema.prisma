generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  ownedTasks     Task[]            @relation("TaskOwner")
  assignedTasks  TaskAssignment[]
  collaborations TaskCollaboration[]
  categories     Category[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@unique([userId, name])
  @@map("categories")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamentos
  ownerId    String
  owner      User      @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  assignments     TaskAssignment[]
  collaborations  TaskCollaboration[]

  @@map("tasks")
}

model TaskAssignment {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())

  // Relacionamentos
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignments")
}

model TaskCollaboration {
  id            String              @id @default(cuid())
  role          CollaborationRole   @default(VIEWER)
  invitedAt     DateTime            @default(now())
  acceptedAt    DateTime?

  // Relacionamentos
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_collaborations")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CollaborationRole {
  VIEWER
  EDITOR
  ADMIN
}
